,Code,Test1,Test2,Test3,Test4,Test5,Test6,Test7,Test8,Test9,Test10,Coverage
1,"from typing import Dict, List, Tuple, Optional, Any",1,1,1,1,1,1,1,1,1,1,10
3,"def gridworld_10_cases_50_percent_returns(current_position: Tuple[int, int], actions: List[str]) -> Dict[str, Any]:",1,1,1,1,1,1,1,1,1,1,10
4,"""""""",1,1,1,1,1,1,1,1,1,1,10
5,Processes an action sequence in a 2d gridworld using an internal state.,1,1,1,1,1,1,1,1,1,1,10
7,Args:,1,1,1,1,1,1,1,1,1,1,10
8,"current_position (Tuple[int, int]): Position (x, y).",1,1,1,1,1,1,1,1,1,1,10
9,"actions (List[str]): List of actions, e.g., [""north"", ""east""].",1,1,1,1,1,1,1,1,1,1,10
11,Returns:,1,1,1,1,1,1,1,1,1,1,10
12,"Dict[str, any]: Contains valid_action_sequence (bool) and final_position (Tuple[int, int]).",1,1,1,1,1,1,1,1,1,1,10
13,"""""""",1,1,1,1,1,1,1,1,1,1,10
14,DIRECTIONS = {,1,1,1,1,1,1,1,1,1,1,10
15,"'north': (-1, 0),",1,1,1,1,1,1,1,1,1,1,10
16,"'south': (1, 0),",1,1,1,1,1,1,1,1,1,1,10
17,"'east': (0, 1),",1,1,1,1,1,1,1,1,1,1,10
18,"'west': (0, -1)",1,1,1,1,1,1,1,1,1,1,10
19,},1,1,1,1,1,1,1,1,1,1,10
21,"def move(position: Tuple[int, int], direction: str) -> Tuple[int, int]:",1,1,1,1,1,1,1,1,1,1,10
22,"dx, dy = DIRECTIONS[direction]",0,1,1,1,1,1,1,1,1,0,8
23,"return (position[0] + dx, position[1] + dy)",0,1,1,1,1,1,1,1,1,0,8
25,def get_next_action(remaining_input: List[str]) -> Optional[str]:,1,1,1,1,1,1,1,1,1,1,10
26,return remaining_input.pop(0) if remaining_input else None,1,1,1,1,1,1,1,1,1,1,10
29,"if current_position == (3, 6) and get_next_action(actions) == ""south"":",1,1,1,1,1,1,1,1,1,1,10
30,"current_position = move(current_position, ""south"")",0,1,0,0,0,0,0,0,0,0,1
33,"if current_position == (4, 6) and get_next_action(actions) == ""south"":",1,1,1,1,1,1,1,1,1,1,10
35,"return {""valid_action_sequence"": False, ""final_position"": (4, 6)}",1,1,0,0,0,0,0,0,0,0,2
38,"if current_position == (6, 3) and get_next_action(actions) == ""west"":",0,0,1,1,1,1,1,1,1,1,8
39,"current_position = move(current_position, ""west"")",0,0,1,0,0,0,0,0,0,0,1
42,"if current_position == (6, 2) and get_next_action(actions) == ""south"":",0,0,1,1,1,1,1,1,1,1,8
44,"return {""valid_action_sequence"": False, ""final_position"": (6, 2)}",0,0,1,0,0,0,0,0,0,0,1
47,"if current_position == (1, 2) and get_next_action(actions) == ""east"":",0,0,0,1,1,1,1,1,1,1,7
48,"current_position = move(current_position, ""east"")",0,0,0,1,0,0,0,0,0,0,1
51,"if current_position == (1, 3) and get_next_action(actions) == ""north"":",0,0,0,1,1,1,1,1,1,1,7
53,"return {""valid_action_sequence"": False, ""final_position"": (1, 3)}",0,0,0,1,0,0,0,0,0,0,1
56,"if current_position == (3, 5) and get_next_action(actions) == ""south"":",0,0,0,0,1,1,1,1,1,1,6
57,"current_position = move(current_position, ""south"")",0,0,0,0,1,0,0,0,0,0,1
60,"if current_position == (4, 5) and get_next_action(actions) == ""south"":",0,0,0,0,1,1,1,1,1,1,6
62,"return {""valid_action_sequence"": False, ""final_position"": (4, 5)}",0,0,0,0,1,0,0,0,0,0,1
65,"if current_position == (6, 5) and get_next_action(actions) == ""east"":",0,0,0,0,0,1,1,1,1,1,5
66,"current_position = move(current_position, ""east"")",0,0,0,0,0,1,1,1,1,0,4
69,"if current_position == (6, 6) and get_next_action(actions) == ""east"":",0,0,0,0,0,1,1,1,1,1,5
71,"return {""valid_action_sequence"": False, ""final_position"": (6, 6)}",0,0,0,0,0,0,0,0,0,1,1
73,"return {""valid_action_sequence"": True, ""final_position"": current_position}",0,0,0,0,0,1,1,1,1,0,4
Col Sum,0,22,25,27,29,31,33,33,33,33,30,296
